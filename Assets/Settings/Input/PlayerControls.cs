//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Settings/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""CombatControls"",
            ""id"": ""0646f8d2-0967-4b36-83cc-55086f2b2b94"",
            ""actions"": [
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""Button"",
                    ""id"": ""1372b00a-bfa2-415b-a8b5-9bca407faa7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""Value"",
                    ""id"": ""7fafdda4-a6cb-49cf-9222-c11fa590607c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryContact"",
                    ""type"": ""Button"",
                    ""id"": ""a6f075c3-67bb-497b-897c-968482c6ff75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryPosition"",
                    ""type"": ""Value"",
                    ""id"": ""79cff7e0-39c5-4933-828d-ecfcf44257ec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9bd45932-8d0d-4fa0-87bf-2b5825bcd647"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile Controls"",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64fb6df4-611c-42d7-8db4-332fab17b2fb"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile Controls"",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bbe55f8-c8a5-4ff3-8305-035caf564ab3"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile Controls"",
                    ""action"": ""SecondaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c82b194f-dd3d-4023-bd97-150c8cbb8055"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile Controls"",
                    ""action"": ""SecondaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debugging"",
            ""id"": ""67729b3c-55cb-4b44-8ba9-43b4c9f3eee5"",
            ""actions"": [
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""367a8f80-e894-45d3-b546-40d37100e192"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""fc55a55f-9bfe-4d89-823e-97a2731ea448"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""a0df3b2b-7045-476c-936b-2fe7a56586a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""45aa1721-b839-45d8-a90d-c5cecb3ed08f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""00e0990b-dc86-49ff-9bcc-0e1647b57353"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""5d77c0cb-0cfe-4f8f-8201-1aef16215461"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5d7777c2-802f-4d55-8231-7d948edc10f0"",
                    ""path"": ""<Keyboard>/#(a)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse Controls"",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b11c5eba-3ec9-4320-9993-8d400a4208cf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse Controls"",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab642de1-bd71-4b12-a92c-baf00f1ec55f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse Controls"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""daaf6f7d-cc10-4f72-943d-204f75a0ac48"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse Controls"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90760aa9-9035-4e51-9e9c-bd3529e30e1a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse Controls"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4a3be0d-62a9-403e-801a-ceb2103a6c7b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse Controls"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bff1c54-d9e5-4ae3-b543-6f5c86f25952"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse Controls"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b318198e-6792-47dd-8db8-b483993c6bfe"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse Controls"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e712f21-9584-4096-b54f-769736220f6d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse Controls"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c69000e8-eeab-4ff9-b91d-a48403e3fe41"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard Mouse Controls"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mobile Controls"",
            ""bindingGroup"": ""Mobile Controls"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard Mouse Controls"",
            ""bindingGroup"": ""Keyboard Mouse Controls"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // CombatControls
        m_CombatControls = asset.FindActionMap("CombatControls", throwIfNotFound: true);
        m_CombatControls_PrimaryContact = m_CombatControls.FindAction("PrimaryContact", throwIfNotFound: true);
        m_CombatControls_PrimaryPosition = m_CombatControls.FindAction("PrimaryPosition", throwIfNotFound: true);
        m_CombatControls_SecondaryContact = m_CombatControls.FindAction("SecondaryContact", throwIfNotFound: true);
        m_CombatControls_SecondaryPosition = m_CombatControls.FindAction("SecondaryPosition", throwIfNotFound: true);
        // Debugging
        m_Debugging = asset.FindActionMap("Debugging", throwIfNotFound: true);
        m_Debugging_Test = m_Debugging.FindAction("Test", throwIfNotFound: true);
        m_Debugging_Mouse = m_Debugging.FindAction("Mouse", throwIfNotFound: true);
        m_Debugging_Up = m_Debugging.FindAction("Up", throwIfNotFound: true);
        m_Debugging_Down = m_Debugging.FindAction("Down", throwIfNotFound: true);
        m_Debugging_Left = m_Debugging.FindAction("Left", throwIfNotFound: true);
        m_Debugging_Right = m_Debugging.FindAction("Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CombatControls
    private readonly InputActionMap m_CombatControls;
    private ICombatControlsActions m_CombatControlsActionsCallbackInterface;
    private readonly InputAction m_CombatControls_PrimaryContact;
    private readonly InputAction m_CombatControls_PrimaryPosition;
    private readonly InputAction m_CombatControls_SecondaryContact;
    private readonly InputAction m_CombatControls_SecondaryPosition;
    public struct CombatControlsActions
    {
        private @PlayerControls m_Wrapper;
        public CombatControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryContact => m_Wrapper.m_CombatControls_PrimaryContact;
        public InputAction @PrimaryPosition => m_Wrapper.m_CombatControls_PrimaryPosition;
        public InputAction @SecondaryContact => m_Wrapper.m_CombatControls_SecondaryContact;
        public InputAction @SecondaryPosition => m_Wrapper.m_CombatControls_SecondaryPosition;
        public InputActionMap Get() { return m_Wrapper.m_CombatControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatControlsActions set) { return set.Get(); }
        public void SetCallbacks(ICombatControlsActions instance)
        {
            if (m_Wrapper.m_CombatControlsActionsCallbackInterface != null)
            {
                @PrimaryContact.started -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.performed -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.canceled -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnPrimaryContact;
                @PrimaryPosition.started -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.performed -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.canceled -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnPrimaryPosition;
                @SecondaryContact.started -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnSecondaryContact;
                @SecondaryContact.performed -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnSecondaryContact;
                @SecondaryContact.canceled -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnSecondaryContact;
                @SecondaryPosition.started -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnSecondaryPosition;
                @SecondaryPosition.performed -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnSecondaryPosition;
                @SecondaryPosition.canceled -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnSecondaryPosition;
            }
            m_Wrapper.m_CombatControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryContact.started += instance.OnPrimaryContact;
                @PrimaryContact.performed += instance.OnPrimaryContact;
                @PrimaryContact.canceled += instance.OnPrimaryContact;
                @PrimaryPosition.started += instance.OnPrimaryPosition;
                @PrimaryPosition.performed += instance.OnPrimaryPosition;
                @PrimaryPosition.canceled += instance.OnPrimaryPosition;
                @SecondaryContact.started += instance.OnSecondaryContact;
                @SecondaryContact.performed += instance.OnSecondaryContact;
                @SecondaryContact.canceled += instance.OnSecondaryContact;
                @SecondaryPosition.started += instance.OnSecondaryPosition;
                @SecondaryPosition.performed += instance.OnSecondaryPosition;
                @SecondaryPosition.canceled += instance.OnSecondaryPosition;
            }
        }
    }
    public CombatControlsActions @CombatControls => new CombatControlsActions(this);

    // Debugging
    private readonly InputActionMap m_Debugging;
    private IDebuggingActions m_DebuggingActionsCallbackInterface;
    private readonly InputAction m_Debugging_Test;
    private readonly InputAction m_Debugging_Mouse;
    private readonly InputAction m_Debugging_Up;
    private readonly InputAction m_Debugging_Down;
    private readonly InputAction m_Debugging_Left;
    private readonly InputAction m_Debugging_Right;
    public struct DebuggingActions
    {
        private @PlayerControls m_Wrapper;
        public DebuggingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Test => m_Wrapper.m_Debugging_Test;
        public InputAction @Mouse => m_Wrapper.m_Debugging_Mouse;
        public InputAction @Up => m_Wrapper.m_Debugging_Up;
        public InputAction @Down => m_Wrapper.m_Debugging_Down;
        public InputAction @Left => m_Wrapper.m_Debugging_Left;
        public InputAction @Right => m_Wrapper.m_Debugging_Right;
        public InputActionMap Get() { return m_Wrapper.m_Debugging; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebuggingActions set) { return set.Get(); }
        public void SetCallbacks(IDebuggingActions instance)
        {
            if (m_Wrapper.m_DebuggingActionsCallbackInterface != null)
            {
                @Test.started -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnTest;
                @Test.performed -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnTest;
                @Test.canceled -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnTest;
                @Mouse.started -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnMouse;
                @Up.started -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnRight;
            }
            m_Wrapper.m_DebuggingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Test.started += instance.OnTest;
                @Test.performed += instance.OnTest;
                @Test.canceled += instance.OnTest;
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
            }
        }
    }
    public DebuggingActions @Debugging => new DebuggingActions(this);
    private int m_MobileControlsSchemeIndex = -1;
    public InputControlScheme MobileControlsScheme
    {
        get
        {
            if (m_MobileControlsSchemeIndex == -1) m_MobileControlsSchemeIndex = asset.FindControlSchemeIndex("Mobile Controls");
            return asset.controlSchemes[m_MobileControlsSchemeIndex];
        }
    }
    private int m_KeyboardMouseControlsSchemeIndex = -1;
    public InputControlScheme KeyboardMouseControlsScheme
    {
        get
        {
            if (m_KeyboardMouseControlsSchemeIndex == -1) m_KeyboardMouseControlsSchemeIndex = asset.FindControlSchemeIndex("Keyboard Mouse Controls");
            return asset.controlSchemes[m_KeyboardMouseControlsSchemeIndex];
        }
    }
    public interface ICombatControlsActions
    {
        void OnPrimaryContact(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
        void OnSecondaryContact(InputAction.CallbackContext context);
        void OnSecondaryPosition(InputAction.CallbackContext context);
    }
    public interface IDebuggingActions
    {
        void OnTest(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
